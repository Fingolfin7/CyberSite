[
    {
        "title": "Injection",
        "poc": "",
        "desc": "An application is vulnerable to attack when: * User-supplied data is not validated, filtered, or sanitized by the application. * Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. * Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. * Hostile data is directly used or concatenated, such that the SQL or command contains both structure and hostile data in dynamic queries, commands, or stored procedures. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections, closely followed by thorough automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs. Organizations can include static source (SAST) and dynamic application test (DAST) tools into the CI/CD pipeline to identify newly introduced injection flaws prior to production deployment.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Broken Authentication",
        "poc": "",
        "desc": "The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks. Confirmation of the user\u00e2\u0080\u0099s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: * Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords. * Permits brute force or other automated attacks. * Permits default, weak, or well-known passwords, such as \u00e2\u0080\u009cPassword1\u00e2\u0080\u009d or \u00e2\u0080\u009cadmin/admin\u00e2\u0080\u009c. * Uses weak or ineffective credential recovery and forgot-password processes, such as \u00e2\u0080\u009cknowledge-based answers\u00e2\u0080\u009d, which cannot be made safe. * Uses plain text, encrypted, or weakly hashed passwords (see A3:2017-Sensitive Data Exposure). * Has missing or ineffective multi-factor authentication. * Exposes Session IDs in the URL (e.g., URL rewriting). * Does not rotate Session IDs after successful login. * Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren\u00e2\u0080\u0099t properly invalidated during logout or a period of inactivity.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Sensitive Data Exposure",
        "poc": "",
        "desc": "Over the last few years, this has been the most common impactful attack. The most common flaw is simply not encrypting sensitive data. When crypto is employed, weak key generation and management, and weak algorithm, protocol and cipher usage is common, particularly for weak password hashing storage techniques. For data in transit, server-side weaknesses are mainly easy to detect, but hard for data at rest. The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information and business secrets require extra protection, particularly if that data falls under privacy laws, e.g. EU\u00e2\u0080\u0099s General Data Protection Regulation (GDPR), or regulations, e.g. financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: * Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, and FTP. External internet traffic is especially dangerous. Verify all internal traffic e.g. between load balancers, web servers, or back-end systems. * Are any old or weak cryptographic algorithms used either by default or in older code? * Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? * Is encryption not enforced, e.g. are any user agent (browser) security directives or headers missing? * Does the user agent (e.g. app, mail client) not verify if the received server certificate is valid?",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "XML External Entities (XXE)",
        "poc": "",
        "desc": "By default, many older XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. SAST tools can discover this issue by inspecting dependencies and configuration. DAST tools require additional manual steps to detect and exploit this issue. Manual testers need to be trained in how to test for XXE, as it not commonly tested as of 2017. Applications and in particular XML-based web services or downstream integrations might be vulnerable to attack if: * The application accepts XML directly or XML uploads, especially from untrusted sources, or inserts untrusted data into XML documents, which is then parsed by an XML processor. * Any of the XML processors in the application or SOAP based web services has document type definitions (DTDs) enabled. As the exact mechanism for disabling DTD processing varies by processor, it is good practice to consult a reference such as the OWASP Cheat Sheet \u00e2\u0080\u0098XXE Prevention\u00e2\u0080\u0099. * If the application uses SAML for identity processing within federated security or single sign on (SSO) purposes. SAML uses XML for identity assertions, and may be vulnerable. * If the application uses SOAP prior to version 1.2, it is likely susceptible to XXE attacks if XML entities are being passed to the SOAP framework. Being vulnerable to XXE attacks likely means that the application is vulnerable to denial of service attacks including the Billion Laughs attack.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Broken Access Control",
        "poc": "",
        "desc": "Access control weaknesses are common due to the lack of automated detection, and lack of effective functional testing by application developers. Access control detection is not typically amenable to automated static or dynamic testing. Manual testing is the best way to detect missing or ineffective access control, including HTTP method (GET vs PUT, etc), controller, direct object references, etc. Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification or destruction of all data, or performing a business function outside of the limits of the user. Common access control vulnerabilities include: * Bypassing access control checks by modifying the URL, internal application state, or the HTML page, or simply using a custom API attack tool. * Allowing the primary key to be changed to another\u00e2\u0080\u0099s users record, permitting viewing or editing someone else\u00e2\u0080\u0099s account. * Elevation of privilege. Acting as a user without being logged in, or acting as an admin when logged in as a user. * Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token or a cookie or hidden field manipulated to elevate privileges, or abusing JWT invalidation. * CORS misconfiguration allows unauthorized API access. * Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. Accessing API with missing access controls for POST, PUT and DELETE.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Security Misconfiguration",
        "poc": "",
        "desc": "Security misconfiguration can happen at any level of an application stack, including the network services, platform, web server, application server, database, frameworks, custom code, and pre-installed virtual machines, containers, or storage. Automated scanners are useful for detecting misconfigurations, use of default accounts or configurations, unnecessary services, legacy options, etc. The application might be vulnerable if the application is: * Missing appropriate security hardening across any part of the application stack, or improperly configured permissions on cloud services. * Unnecessary features are enabled or installed (e.g. unnecessary ports, services, pages, accounts, or privileges). * Default accounts and their passwords still enabled and unchanged. * Error handling reveals stack traces or other overly informative error messages to users. * For upgraded systems, latest security features are disabled or not configured securely. * The security settings in the application servers, application frameworks (e.g. Struts, Spring, ASP.NET), libraries, databases, etc. not set to secure values. * The server does not send security headers or directives or they are not set to secure values. * The software is out of date or vulnerable (see A9:2017-Using Components with Known Vulnerabilities). Without a concerted, repeatable application security configuration process, systems are at a higher risk.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Cross-Site Scripting (XSS)",
        "poc": "",
        "desc": "XSS is the second most prevalent issue in the OWASP Top 10, and is found in around two thirds of all applications. Automated tools can find some XSS problems automatically, particularly in mature technologies such as PHP, J2EE / JSP, and ASP.NET. There are three forms of XSS, usually targeting users\u00e2\u0080\u0099 browsers: * Reflected XSS: The application or API includes unvalidated and unescaped user input as part of HTML output. A successful attack can allow the attacker to execute arbitrary HTML and JavaScript in the victim\u00e2\u0080\u0099s browser. Typically the user will need to interact with some malicious link that points to an attacker-controlled page, such as malicious watering hole websites, advertisements, or similar. * Stored XSS: The application or API stores unsanitized user input that is viewed at a later time by another user or an administrator. Stored XSS is often considered a high or critical risk. * DOM XSS: JavaScript frameworks, single-page applications, and APIs that dynamically include attacker-controllable data to a page are vulnerable to DOM XSS. Ideally, the application would not send attacker-controllable data to unsafe JavaScript APIs. Typical XSS attacks include session stealing, account takeover, MFA bypass, DOM node replacement or defacement (such as trojan login panels), attacks against the user\u00e2\u0080\u0099s browser such as malicious software downloads, key logging, and other client-side attacks.",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Insecure Deserialization",
        "poc": "",
        "desc": "This issue is included in the Top 10 based on an industry survey and not on quantifiable data. Some tools can discover deserialization flaws, but human assistance is frequently needed to validate the problem. It is expected that prevalence data for deserialization flaws will increase as tooling is developed to help identify and address it. Applications and APIs will be vulnerable if they deserialize hostile or tampered objects supplied by an attacker. This can result in two primary types of attacks: * Object and data structure related attacks where the attacker modifies application logic or achieves arbitrary remote code execution if there are classes available to the application that can change behavior during or after deserialization. * Typical data tampering attacks such as access-control-related attacks where existing data structures are used but the content is changed. Serialization may be used in applications for: * Remote- and inter-process communication (RPC/IPC) * Wire protocols, web services, message brokers * Caching/Persistence * Databases, cache servers, file systems * HTTP cookies, HTML form parameters, API authentication tokens",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Using Components with Known Vulnerabilities",
        "poc": "",
        "desc": "Prevalence of this issue is very widespread. Component-heavy development patterns can lead to development teams not even understanding which components they use in their application or API, much less keeping them up to date. Some scanners such as retire.js help in detection, but determining exploitability requires additional effort. You are likely vulnerable: * If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. * If software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. * If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. * If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, which leaves organizations open to many days or months of unnecessary exposure to fixed vulnerabilities. * If software developers do not test the compatibility of updated, upgraded, or patched libraries. * If you do not secure the components\u00e2\u0080\u0099 configurations (see A6:2017-Security Misconfiguration).",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Insufficient Logging & Monitoring",
        "poc": "",
        "desc": "This issue is included in the Top 10 based on an industry survey. One strategy for determining if you have sufficient monitoring is to examine the logs following penetration testing. The testers\u00e2\u0080\u0099 actions should be recorded sufficiently to understand what damages they may have inflicted. Insufficient logging, detection, monitoring and active response occurs any time: * Auditable events, such as logins, failed logins, and high-value transactions are not logged. * Warnings and errors generate no, inadequate, or unclear log messages. * Logs of applications and APIs are not monitored for suspicious activity. * Logs are only stored locally. * Appropriate alerting thresholds and response escalation processes are not in place or effective. * Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts. * The application is unable to detect, escalate, or alert for active attacks in real time or near real time. You are vulnerable to information leakage if you make logging and alerting events visible to a user or an attacker (see A3:2017-Sensitive Data Exposure).",
        "severity": "High",
        "ref": "https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\nhttps://owasp.org/www-project-top-ten/",
        "cvss": "6",
        "cve": ""
    },
    {
        "title": "Broken Access Control",
        "poc": "",
        "desc": "Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include:\n\n- Bypassing access control checks by modifying the URL, internal application state, or the HTML page, or simply using a custom API attack tool.\n- Allowing the primary key to be changed to another user's record, permitting viewing or editing someone else's account.\n- Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user.\n- Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation.\n- CORS misconfiguration allows unauthorized API access.\n- Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user. Accessing API with missing access controls for POST, PUT and DELETE.\n\nHow to Prevent\n\nAccess control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata.\n\n- Except for public resources, deny by default.\n- Implement access control mechanisms once and re-use them throughout the application, including minimizing CORS usage.\n- Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record.\n- Unique application business limit requirements should be enforced by domain models.\n- Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots.\n- Log access control failures, alert admins when appropriate (e.g., repeated failures).\n- Rate limit API and controller access to minimize the harm from automated attack tooling.\n- JWT tokens should be invalidated on the server after logout.\n\nDevelopers and QA staff should include functional access control unit and integration tests.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Cryptographic Failures",
        "poc": "",
        "desc": "The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data:\n\n- Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, and FTP. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems.\n- Are any old or weak cryptographic algorithms used either by default or in older code?\n- Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing?\n- Is encryption not enforced, e.g., are any user agent (browser) security directives or headers missing?\n- Does the user agent (e.g., app, mail client) not verify if the received server certificate is valid?\n\n\nHow to Prevent\n\nDo the following, at a minimum, and consult the references:\n\n- Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.\n- Apply controls as per the classification.\n- Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.\n- Make sure to encrypt all sensitive data at rest.\n- Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.\n- Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).\n- Disable caching for response that contain sensitive data.\n- Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.\n- Verify independently the effectiveness of configuration and settings.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Insecure Design",
        "poc": "",
        "desc": "Insecure design is a broad category representing many different weaknesses, expressed as \u00e2\u0080\u009cmissing or ineffective control design.\u00e2\u0080\u009d Missing insecure design is where a control is absent. For example, imagine code that should be encrypting sensitive data, but there is no method. Ineffective insecure design is where a threat could be realized, but insufficient domain (business) logic validation prevents the action. For example, imagine domain logic that is supposed to process pandemic tax relief based upon income brackets but does not validate that all inputs are correctly signed and provides a much more significant relief benefit than should be granted.\n\nSecure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Secure design requires a secure development lifecycle, some form of secure design pattern or paved road component library or tooling, and threat modeling.\n\nHow to Prevent\n\n- Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls.\n- Establish and use a library of secure design patterns or paved road ready to use components.\n- Use threat modeling for critical authentication, access control, business logic, and key flows.\n- Write unit and integration tests to validate that all critical flows are resistant to the threat model.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Security Misconfiguration",
        "poc": "",
        "desc": "The application might be vulnerable if the application is:\n\n- Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services.\n- Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges).\n- Default accounts and their passwords are still enabled and unchanged.\n- Error handling reveals stack traces or other overly informative error messages to users.\n- For upgraded systems, the latest security features are disabled or not configured securely.\n- The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values.\n- The server does not send security headers or directives, or they are not set to secure values.\n- The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components).\nWithout a concerted, repeatable application security configuration process, systems are at a higher risk.\n\nHow to Prevent\n\nSecure installation processes should be implemented, including:\n\n- A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment.\n- A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.\n- A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions).\n- A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).\n- Sending security directives to clients, e.g., Security Headers.\n- An automated process to verify the effectiveness of the configurations and settings in all environments.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Vulnerable and Outdated Components",
        "poc": "",
        "desc": "You are likely vulnerable:\n\nIf you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies.\nIf the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries.\nIf you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use.\nIf you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities.\nIf software developers do not test the compatibility of updated, upgraded, or patched libraries.\nIf you do not secure the components\u00e2\u0080\u0099 configurations (see A05:2021-Security Misconfiguration).\n\n\nHow to Prevent\n\nThere should be a patch management process in place to:\n\nRemove unused dependencies, unnecessary features, components, files, and documentation.\nContinuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like CVE and NVD for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use.\nOnly obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures).\nMonitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue.\n\nEvery organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Identification and Authentication Failures",
        "poc": "",
        "desc": "Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:\n\n- Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.\n- Permits brute force or other automated attacks.\n- Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin.\"\n- Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe.\n- Uses plain text, encrypted, or weakly hashed passwords (see A3:2017-Sensitive Data Exposure).\n- Has missing or ineffective multi-factor authentication.\n- Exposes Session IDs in the URL (e.g., URL rewriting).\n- Do not rotate Session IDs after successful login.\n- Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.\n\n\nHow to Prevent\n\n- Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks.\n- Do not ship or deploy with any default credentials, particularly for admin users.\n- Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list.\n- Align password length, complexity, and rotation policies with NIST 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies.\n- Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes.\n- Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected.\n- Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Software and Data Integrity Failures",
        "poc": "",
        "desc": "Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. For example, where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization. Another form of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations.\n\nHow to Prevent\n\n- Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data.\n- Verify the software or data is from the expected source via signing or similar mechanisms.\n- Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories.\n- Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities.\n- Ensure that your CI/CD pipeline has proper configuration and access control to ensure the integrity of the code flowing through the build and deploy processes.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Security Logging and Monitoring Failures",
        "poc": "",
        "desc": "Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time:\n\n- Auditable events, such as logins, failed logins, and high-value transactions, are not logged.\n- Warnings and errors generate no, inadequate, or unclear log messages.\n- Logs of applications and APIs are not monitored for suspicious activity.\n- Logs are only stored locally.\n- Appropriate alerting thresholds and response escalation processes are not in place or effective.\n- Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts.\n- The application cannot detect, escalate, or alert for active attacks in real-time or near real-time.\n\nYou are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021 \u00e2\u0080\u0093 Broken Access Control).\n\n\nHow to Prevent\n\nDevelopers should implement some or all the following controls, d epending on the risk of the application:\n\n- Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis.\n- Ensure that logs are generated in a format that log management solutions can easily consume.\n- Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems.\n- Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar.\n- DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly.\n- Establish or adopt an incident response and recovery plan, such as NIST 800-61r2 or later.\n\nThere are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the ELK stack, that feature custom dashboards and alerting.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "cvss": "",
        "cve": ""
    },
    {
        "title": "Server-Side Request Forgery (SSRF)",
        "poc": "",
        "desc": "SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network ACL.\n\nAs modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.\n\nHow to Prevent\n\nDevelopers can prevent SSRF by implementing some or all the following defense in depth controls:\n\nFrom Network layer\n\nSegment remote resource access functionality in separate networks to reduce the impact of SSRF.\nEnforce \"deny by default\" firewall policies or network access control rules to block all but essential intranet traffic.\n\n\nFrom Application layer:\n\nSanitize and validate all client-supplied input data.\nEnforce the URL schema, port, and destination with a positive allow list.\nDo not send raw responses to clients.\nDisable HTTP redirections.\nBe aware of the URL consistency to avoid attacks such as DNS rebinding and \u00e2\u0080\u009ctime of check, time of use\u00e2\u0080\u009d (TOCTOU) race conditions\n\nDo not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.",
        "severity": "High",
        "ref": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/",
        "cvss": "",
        "cve": ""
    }
]